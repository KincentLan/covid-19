{"version":3,"sources":["MapChart.js","Graph.js","Search.js","index.js"],"names":["filterNegative","x","memo","props","cases","map","deaths","columns","column_deaths","cases_date_idx","length","deaths_date_idx","i","colorScale","scaleThreshold","domain","Number","MAX_SAFE_INTEGER","range","className","data-tip","projection","zoom","geography","geographies","geo","key","rsmKey","stroke","fill","curCases","find","s","id","curDeaths","last_case","last_death","onMouseEnter","setTooltipContent","onMouseLeave","style","hover","outline","pressed","href","Graph","data","curElement","collegeData","push","Math","round","name","width","height","dataKey","dot","value","position","label","offset","angle","textAnchor","Search","useState","display","setDisplay","options","setOptions","colleges","setColleges","curCollege","setCurCollege","collegeCases","setCollegeCases","collegeDeaths","setCollegeDeaths","search","setSearch","sevenDayDailyAvg","arr","collegeDataAvg","sevenCases","j","reduce","a","b","dailyCases","useEffect","csv","then","collegeArr","names","forEach","row","college","type","autoComplete","list","onChange","event","target","toLowerCase","parseInt","countyFIPS","placeholder","filter","includes","slice","tabIndex","state","App","setCases","setDeaths","setColumns","columnsDeaths","setColumnsDeaths","content","setContent","html","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4ffacf65.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {ZoomableGroup, ComposableMap, Geographies, Geography} from \"react-simple-maps\";\r\nimport {scaleThreshold} from \"d3-scale\";\r\n\r\nconst geoUrl_counties = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\nconst geoUrl_states = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nfunction filterNegative(x) {\r\n    if (x < 0) {\r\n        return 0;\r\n    }\r\n    return x;\r\n}\r\nconst MapChart = (props) => {\r\n    const cases = props.cases.map(x => filterNegative(x));\r\n    const deaths = props.deaths.map(x => filterNegative(x));\r\n    const columns = props.columns;\r\n    const column_deaths = props.column_deaths\r\n    const cases_date_idx = columns.length - 1;\r\n    const deaths_date_idx = props.column_deaths.length - 1;\r\n\r\n    for (let i = 0; i < cases.length; i++) {\r\n        if (cases[i]['countyFIPS'].length === 4) {\r\n            cases[i]['countyFIPS'] = \"0\" + cases[i]['countyFIPS'];\r\n        }\r\n        if (i < deaths.length && deaths[i]['countyFIPS'].length === 4) {\r\n            deaths[i]['countyFIPS'] = \"0\" + deaths[i]['countyFIPS'];\r\n        }\r\n    }\r\n\r\n\r\n    const colorScale = scaleThreshold()\r\n        .domain([0, 5, 10, 50, 100, 500, 1000, 5000, Number.MAX_SAFE_INTEGER])\r\n        .range([\r\n            \"#FFF2F2\",\r\n            \"#FFE5E5\",\r\n            \"#FFC6C6\",\r\n            \"#FFAAAA\",\r\n            \"#FF6868\",\r\n            \"#FD4646\",\r\n            \"#FF0F00\",\r\n            \"#FF0000\",\r\n            \"#A70000\"\r\n        ]);\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n                <ZoomableGroup zoom={1}>\r\n                    <Geographies geography={geoUrl_states}>\r\n                        {({geographies}) => (\r\n                            <>\r\n                                {geographies.map(geo => (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        stroke=\"#000\"\r\n                                        fill=\"#FFF\"\r\n                                        geography={geo}\r\n                                    />\r\n                                ))}\r\n\r\n                                );\r\n                            </>\r\n                        )}\r\n                    </Geographies>\r\n                    <Geographies geography={geoUrl_counties}>\r\n                        {({geographies}) =>\r\n                            geographies.map(geo => {\r\n                                const curCases = cases.find(s => s['countyFIPS'] === geo.id);\r\n                                const curDeaths = deaths.find(s => s['countyFIPS'] === geo.id);\r\n                                let last_case = 0, last_death = 0;\r\n                                if (curCases !== void(0) && curDeaths !== void(0)) {\r\n                                    last_case = curCases[columns[cases_date_idx]] - curCases[columns[cases_date_idx-1]];\r\n                                    last_death = curDeaths[column_deaths[deaths_date_idx]] -\r\n                                        curDeaths[column_deaths[deaths_date_idx-1]];\r\n                                }\r\n                                return (\r\n                                    <Geography id={geo.id}\r\n                                               key={geo.rsmKey}\r\n                                               geography={geo}\r\n                                               fill={curCases ? colorScale(last_case) : \"#EEE\"}\r\n                                               onMouseEnter={() => {\r\n                                                   if (curCases !== void(0)) {\r\n                                                       props.setTooltipContent(\r\n                                                           curCases[\"County Name\"] + \", \" + curCases[\"State\"]\r\n                                                           + \"<br/> New Cases: \" + last_case\r\n                                                           + \"<br/> New Deaths: \" + last_death);\r\n                                                   }\r\n                                               }}\r\n                                               onMouseLeave={() => {\r\n                                                   props.setTooltipContent(\"\");\r\n                                               }}\r\n                                               style={{\r\n                                                   hover: {\r\n                                                       fill: \"#FFFFFF\",\r\n                                                       outline: \"none\"\r\n                                                   },\r\n                                                   pressed: {\r\n                                                       fill: \"#E42\",\r\n                                                       outline: \"none\"\r\n                                                   }\r\n                                               }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n                </ZoomableGroup>\r\n            </ComposableMap>\r\n            <div className=\"info\">\r\n                Retrieved from <a href=\"https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/\">\r\n                usafacts.org</a> <br/>\r\n                New confirmed cases as of: {columns[cases_date_idx]}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer, Label } from \"recharts\";\r\n\r\nconst Graph = (props) => {\r\n    const data = []\r\n    for (let i = 4; i < props.columns.length; i++) {\r\n        let curElement = props.collegeData[props.columns[i]];\r\n        if (curElement < 0) {\r\n            curElement = 0\r\n        }\r\n        data.push({\"date\": props.columns[i], \"Cases\": Math.round(curElement * 100) / 100})\r\n    }\r\n    return (\r\n        <div className=\"graph\">\r\n            <h3>{props.name}</h3>\r\n            <ResponsiveContainer width=\"95%\" height=\"95%\">\r\n                <LineChart data={data}>\r\n                    <Line dataKey=\"Cases\" fill=\"#8884d8\" dot={false}/>\r\n                    <CartesianGrid/>\r\n                    <XAxis dataKey=\"date\" height={50}>\r\n                        <Label value=\"Date\" position=\"insideBottom\"/>\r\n                    </XAxis>\r\n                    <YAxis label={{ offset: 10, value: \"Cases\", angle: -90,\r\n                        position: \"insideLeft\", textAnchor: \"middle\"}}/>\r\n                    <Tooltip/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graph;","import React, { useEffect, useState } from \"react\";\r\nimport { csv } from \"d3-fetch\";\r\nimport Graph from \"./Graph\";\r\n\r\nconst Search = (props) => {\r\n    const deaths = props.deaths;\r\n    const cases = props.cases;\r\n    const columns = props.columns;\r\n    const [display, setDisplay] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const [colleges, setColleges] = useState([]);\r\n    const [curCollege, setCurCollege] = useState(\"\");\r\n    const [collegeCases, setCollegeCases] = useState([]);\r\n    const [collegeDeaths, setCollegeDeaths] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        csv('https://raw.githubusercontent.com/KincentLan/covid-19/' +\r\n            'master/public/colleges.csv').then(collegeArr => {\r\n            const names = [];\r\n            collegeArr.forEach(function(row) {\r\n                names.push(row.college);\r\n            })\r\n            setOptions(names);\r\n            setColleges(collegeArr);\r\n        })\r\n    }, [])\r\n\r\n    function onChange(event) {\r\n        setSearch(event.target.value);\r\n        const college = colleges.find(s => s.college.toLowerCase() === event.target.value.toLowerCase());\r\n        if (college != null) {\r\n            setCurCollege(college);\r\n            setCollegeCases(cases.find(s => parseInt(s.countyFIPS) === parseInt(college.countyFIPS)));\r\n            setCollegeDeaths(deaths.find(s => parseInt(s.countyFIPS) === parseInt(college.countyFIPS)));\r\n            setDisplay(true);\r\n        }\r\n        else {\r\n            setDisplay(false);\r\n        }\r\n    }\r\n\r\n    function sevenDayDailyAvg(arr) {\r\n        const collegeDataAvg = {};\r\n        for (let i = 11; i < columns.length; i++) {\r\n            const sevenCases = [];\r\n            for (let j = i - 7; j < i; j++) {\r\n                if (arr[columns[j]] - arr[columns[j-1]] < 0 || j === 4) {\r\n                    sevenCases.push(0);\r\n                }\r\n                else {\r\n                    sevenCases.push(arr[columns[j]] - arr[columns[j - 1]]);\r\n                }\r\n            }\r\n            collegeDataAvg[columns[i]] = sevenCases.reduce(function(a, b) {return a + b})/sevenCases.length;\r\n        }\r\n        return collegeDataAvg;\r\n    }\r\n\r\n    function dailyCases(arr) {\r\n        const dailyCases = {};\r\n        for (let i = 4; i < columns.length; i++) {\r\n            if (i === 4) {\r\n                dailyCases[columns[i]] = arr[columns[i]];\r\n            }\r\n            else {\r\n                dailyCases[columns[i]] = arr[columns[i]] - arr[columns[i-1]];\r\n            }\r\n        }\r\n        return dailyCases;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-div\">\r\n            <input\r\n                type=\"search\"\r\n                autoComplete=\"on\"\r\n                list=\"options\"\r\n                className=\"search\"\r\n                onChange={event => onChange(event)}\r\n                placeholder=\"Type to search for your college.\"\r\n                value={search}\r\n            />\r\n            <datalist id=\"options\">\r\n                {options\r\n                    .filter(name => name.toLowerCase().includes(search.toLowerCase()))\r\n                    .slice(0, 10)\r\n                    .map((value, i) => {\r\n                        return (\r\n                            <option\r\n                                className=\"option\"\r\n                                key={i}\r\n                                tabIndex=\"0\"\r\n                            >\r\n                                {value}\r\n                            </option>\r\n                        );\r\n                    })\r\n                }\r\n            </datalist>\r\n            {display && (\r\n                <div className=\"college\">\r\n                    <h1>{curCollege.college}</h1>\r\n                    <h2>{collegeCases[\"County Name\"] + \", \" + curCollege.state}</h2>\r\n                    <h3>New confirmed cases in {collegeCases[\"County Name\"]} as of {columns[columns.length-1]}: {\r\n                        collegeCases[columns[columns.length-1]] - collegeCases[columns[columns.length-2]]} confirmed cases\r\n                    </h3>\r\n                    <div className=\"float-container\">\r\n                        <Graph name=\"Daily New Cases\" collegeData={dailyCases(collegeCases)} columns={columns}/>\r\n                        <Graph name=\"Seven-Day Moving Average (New Cases)\" collegeData={sevenDayDailyAvg(collegeCases)} columns={columns}/>\r\n                    </div>\r\n                    <div className=\"float-container\">\r\n                        <Graph name=\"Daily New Deaths\" collegeData={dailyCases(collegeDeaths)} columns={columns}/>\r\n                        <Graph name=\"Seven-Day Moving Average (New Deaths)\" collegeData={sevenDayDailyAvg(collegeDeaths)} columns={columns}/>\r\n                    </div>\r\n                    <div className=\"float-container\">\r\n                        <Graph name=\"Cumulative Cases\" collegeData={collegeCases} columns={columns}/>\r\n                        <Graph name=\"Cumulative Deaths\" collegeData={collegeDeaths} columns={columns}/>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React, {useEffect, useState} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport \"./styles.css\";\r\n\r\nimport MapChart from \"./MapChart\";\r\nimport Search from \"./Search\";\r\nimport {csv} from \"d3-fetch\";\r\n\r\nfunction App() {\r\n    const [cases, setCases] = useState([]);\r\n    const [deaths, setDeaths] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [columnsDeaths, setColumnsDeaths] = useState([]);\r\n    const [content, setContent] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_confirmed_usafacts.csv\").then(data => {\r\n            setCases(data);\r\n            setColumns(data.columns);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_deaths_usafacts.csv\").then(data => {\r\n            setDeaths(data);\r\n            setColumnsDeaths(data.columns);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <MapChart column_deaths={columnsDeaths} columns={columns}\r\n                      cases={cases} deaths={deaths} setTooltipContent={setContent} />\r\n            <ReactTooltip html={true}>{content}</ReactTooltip>\r\n            <Search column_deaths={columnsDeaths} columns={columns} cases={cases} deaths={deaths} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}