{"version":3,"sources":["MapChart.js","Search.js","index.js"],"names":["memo","setTooltipContent","useState","data","setData","col","setCol","useEffect","csv","then","counties","columns","i","length","colorScale","scaleThreshold","domain","Number","MAX_SAFE_INTEGER","range","className","data-tip","projection","zoom","geography","geographies","map","geo","key","rsmKey","stroke","fill","cur","find","s","id","onMouseEnter","cases","onMouseLeave","style","hover","outline","pressed","href","Search","display","setDisplay","options","setOptions","colleges","setColleges","curCollege","setCurCollege","collegeData","setColData","setColumns","search","setSearch","graph","width","height","margin","y_axis","x_axis","div","graphData","dates","title","svg","select","append","attr","x","scaleTime","extent","d","date","call","axisBottom","ticks","tickFormat","timeFormat","y","scaleLinear","value","axisLeft","datum","line","text","selectAll","enter","collegeArr","names","forEach","row","push","college","graphAvgData","previousSeven","j","curAvg","reduce","total","num","timeParse","type","autoComplete","list","onChange","event","target","toLowerCase","countyFIPS","placeholder","filter","name","includes","slice","tabIndex","state","App","content","setContent","html","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1e473688.chunk.js","sourcesContent":["import React, {useState, useEffect, memo} from \"react\";\r\nimport {ZoomableGroup, ComposableMap, Geographies, Geography} from \"react-simple-maps\";\r\nimport {scaleThreshold} from \"d3-scale\";\r\nimport {csv} from \"d3-fetch\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\nconst geoUrl_states = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = ({setTooltipContent}) => {\r\n    const [data, setData] = useState([]);\r\n    const [col, setCol] = useState([]);\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_confirmed_usafacts.csv\").then(counties => {\r\n            setData(counties);\r\n            setCol(counties.columns)\r\n        });\r\n    }, []);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (data[i]['countyFIPS'].length === 4) {\r\n            data[i]['countyFIPS'] = \"0\" + data[i]['countyFIPS'];\r\n        }\r\n    }\r\n\r\n    const colorScale = scaleThreshold()\r\n        .domain([0, 5, 10, 50, 100, 500, 1000, 5000, Number.MAX_SAFE_INTEGER])\r\n        .range([\r\n            \"#FFF2F2\",\r\n            \"#FFE5E5\",\r\n            \"#FFC6C6\",\r\n            \"#FFAAAA\",\r\n            \"#FF6868\",\r\n            \"#FD4646\",\r\n            \"#FF0F00\",\r\n            \"#FF0000\",\r\n            \"#A70000\"\r\n        ]);\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n                <ZoomableGroup zoom={1}>\r\n                    <Geographies geography={geoUrl_states}>\r\n                        {({geographies}) => (\r\n                            <>\r\n                                {geographies.map(geo => (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        stroke=\"#000\"\r\n                                        fill=\"#FFF\"\r\n                                        geography={geo}\r\n                                    />\r\n                                ))}\r\n\r\n                                );\r\n                            </>\r\n                        )}\r\n                    </Geographies>\r\n                    <Geographies geography={geoUrl}>\r\n                        {({geographies}) =>\r\n                            geographies.map(geo => {\r\n                                const cur = data.find(s => s['countyFIPS'] === geo.id);\r\n                                return (\r\n                                    <Geography id={geo.id}\r\n                                               key={geo.rsmKey}\r\n                                               geography={geo}\r\n                                               fill={cur ? colorScale(cur[col[col.length - 1]] - cur[col[col.length-2]]) : \"#EEE\"}\r\n                                               onMouseEnter={() => {\r\n                                                   if (cur != null) {\r\n                                                       const cases = cur[col[col.length - 1]] - cur[col[col.length-2]];\r\n                                                       setTooltipContent(cur[\"County Name\"] + \", \" + cur[\"State\"]\r\n                                                                         + \"<br/> New Cases: \" + cases);\r\n                                                   }\r\n                                               }}\r\n                                               onMouseLeave={() => {\r\n                                                   setTooltipContent(\"\");\r\n                                               }}\r\n                                               style={{\r\n                                                   hover: {\r\n                                                       fill: \"#FFFFFF\",\r\n                                                       outline: \"none\"\r\n                                                   },\r\n                                                   pressed: {\r\n                                                       fill: \"#E42\",\r\n                                                       outline: \"none\"\r\n                                                   }\r\n                                               }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n                </ZoomableGroup>\r\n            </ComposableMap>\r\n            <div className=\"info\">\r\n                Retrieved from <a href=\"https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/\">\r\n                usafacts.org</a> <br/>\r\n                New confirmed cases as of: {col[col.length-1]}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { csv } from \"d3-fetch\";\r\nimport { select } from \"d3-selection\";\r\nimport {timeFormat, timeParse} from \"d3-time-format\";\r\nimport { scaleTime, scaleLinear } from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport { axisBottom, axisLeft } from \"d3-axis\";\r\nimport { line } from \"d3-shape\";\r\n\r\nconst Search = () => {\r\n    const [display, setDisplay] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const [colleges, setColleges] = useState([]);\r\n    const [curCollege, setCurCollege] = useState(\"\");\r\n    const [collegeData, setColData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        csv('/colleges.csv').then(collegeArr => {\r\n            const names = [];\r\n            collegeArr.forEach(function(row) {\r\n                names.push(row.college);\r\n            })\r\n            setOptions(names);\r\n            setColleges(collegeArr);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_confirmed_usafacts.csv\").then(counties => {\r\n            setData(counties);\r\n            setColumns(counties.columns);\r\n        });\r\n    }, []);\r\n\r\n    function graph(width, height, margin, y_axis, x_axis, div, graphData, dates, title) {\r\n        const svg = select(div)\r\n            .append('svg')\r\n            .attr(\"viewBox\", \"0 0 500 500\")\r\n            .append(\"g\")\r\n\r\n\r\n        const x = scaleTime().domain(extent(graphData,\r\n            function(d) { return d.date;})).range([0, width]);\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"axis\")\r\n            .attr(\"transform\", \"translate(0,\" + (height + margin) + \")\")\r\n            .call(axisBottom(x).ticks(7).tickFormat(timeFormat(\"%m/%d\")));\r\n        // Add Y axis\r\n        const y = scaleLinear()\r\n            .domain(extent(graphData, function(d) { return d.value;}))\r\n            .range([ height + margin, 2 * margin ]);\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"axis\")\r\n            .call(axisLeft(y));\r\n        // Add the line\r\n        svg.append(\"path\")\r\n            .datum(graphData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"#69b3a2\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", line()\r\n                .x(function(d) { return x(d.date) })\r\n                .y(function(d) { return y(d.value) })\r\n            )\r\n        svg.append(\"text\")\r\n            .attr(\"transform\", \"rotate(-90)\")\r\n            .attr(\"y\", -3.5 * margin)\r\n            .attr(\"x\",-height/2)\r\n            .attr(\"dy\", \"1em\")\r\n            .style(\"text-anchor\", \"middle\")\r\n            .text(y_axis);\r\n        svg.append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", height + 3.5 * margin)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .text(x_axis);\r\n        svg.append(\"text\")\r\n            .attr(\"x\", width / 2)\r\n            .attr(\"y\", margin)\r\n            .style(\"text-anchor\", \"middle\")\r\n            .text(title);\r\n        // Add the points\r\n\r\n        svg\r\n            .append(\"g\")\r\n            .selectAll(\"dot\")\r\n            .data(graphData)\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"cx\", function(d) { return x(d.date) } )\r\n            .attr(\"cy\", function(d) { return y(d.value) } )\r\n            .attr(\"r\", 5)\r\n            .attr(\"fill\", \"#69b3a2\");\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (collegeData != null && columns != null) {\r\n            const graphData = [];\r\n            const graphAvgData = [];\r\n            const dates = []\r\n            for (let i = columns.length - 7; i < columns.length; i++) {\r\n                const previousSeven = [];\r\n                for (let j = i-7; j < i; j++) {\r\n                    previousSeven.push(collegeData[columns[j]] - collegeData[columns[j-1]]);\r\n                }\r\n                const curAvg = previousSeven.reduce(function(total, num) {\r\n                    return total + num;})/previousSeven.length;\r\n                graphAvgData.push({date: timeParse(\"%m/%d/%Y\")(columns[i] + \"20\"),\r\n                    value: curAvg});\r\n                dates.push(columns[i] + \"20\");\r\n                graphData.push({date: timeParse(\"%m/%d/%Y\")(columns[i] + \"20\"),\r\n                    value: collegeData[columns[i]] - collegeData[columns[i-1]]})\r\n            }\r\n            graph(400, 400, 20, \"New Cases\",\r\n                \"Date\", \"#daily_cases\", graphData, dates, \"Daily New Cases\");\r\n            graph(400, 400, 20, \"Average New Cases\",\r\n                \"Date\", \"#seven_day_avg\", graphAvgData, dates, \"7-Day Moving Average\");\r\n        }\r\n    });\r\n\r\n    function onChange(event) {\r\n        setSearch(event.target.value);\r\n        const college = colleges.find(s => s.college.toLowerCase() === event.target.value.toLowerCase());\r\n        if (college != null) {\r\n            setCurCollege(college);\r\n            setColData(data.find(s => s.countyFIPS === college.countyFIPS));\r\n            setDisplay(true);\r\n        }\r\n        else {\r\n            setDisplay(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-div\">\r\n            <input\r\n                type=\"search\"\r\n                autoComplete=\"on\"\r\n                list=\"options\"\r\n                className=\"search\"\r\n                onChange={event => onChange(event)}\r\n                placeholder=\"Type to search for your college.\"\r\n                value={search}\r\n            />\r\n            <datalist id=\"options\">\r\n                {options\r\n                    .filter(name => name.toLowerCase().includes(search.toLowerCase()))\r\n                    .slice(0, 10)\r\n                    .map((value, i) => {\r\n                        return (\r\n                            <option\r\n                                className=\"option\"\r\n                                key={i}\r\n                                tabIndex=\"0\"\r\n                            >\r\n                                {value}\r\n                            </option>\r\n                        );\r\n                    })\r\n                    }\r\n            </datalist>\r\n            {display && (\r\n               <div className=\"college\">\r\n                   <h1>{curCollege.college}</h1>\r\n                   <h2>{collegeData[\"County Name\"] + \", \" + curCollege.state}</h2>\r\n                   <h3>New confirmed cases in {collegeData[\"County Name\"]} as of {columns[columns.length-1]}: {\r\n                       collegeData[columns[columns.length-1]] - collegeData[columns[columns.length-2]]} confirmed cases</h3>\r\n                   <div className=\"float-container\">\r\n                       <div className=\"graph\">\r\n                           <svg id=\"daily_cases\"/>\r\n                       </div>\r\n                       <div className=\"graph\">\r\n                           <svg id=\"seven_day_avg\"/>\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport \"./styles.css\";\r\n\r\nimport MapChart from \"./MapChart\";\r\nimport Search from \"./Search\";\r\n\r\nfunction App() {\r\n    const [content, setContent] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <MapChart setTooltipContent={setContent} />\r\n            <ReactTooltip html={true}>{content}</ReactTooltip>\r\n            <Search />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}