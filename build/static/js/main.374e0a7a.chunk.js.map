{"version":3,"sources":["MapChart.js","Graph.js","Search.js","index.js"],"names":["memo","setTooltipContent","useState","data","setData","col","setCol","useEffect","csv","then","counties","columns","i","length","colorScale","scaleThreshold","domain","Number","MAX_SAFE_INTEGER","range","className","data-tip","projection","zoom","geography","geographies","map","geo","key","rsmKey","stroke","fill","cur","find","s","id","val","onMouseEnter","onMouseLeave","style","hover","outline","pressed","href","Graph","props","push","collegeData","console","log","name","width","height","dataKey","value","position","label","offset","angle","textAnchor","Search","display","setDisplay","options","setOptions","colleges","setColleges","curCollege","setCurCollege","setColData","setColumns","search","setSearch","collegeArr","names","forEach","row","college","type","autoComplete","list","onChange","event","target","toLowerCase","countyFIPS","placeholder","filter","includes","slice","tabIndex","state","dailyCases","collegeDataAvg","sevenCases","j","reduce","a","b","sevenDayAvg","App","content","setContent","html","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.374e0a7a.chunk.js","sourcesContent":["import React, {useState, useEffect, memo} from \"react\";\r\nimport {ZoomableGroup, ComposableMap, Geographies, Geography} from \"react-simple-maps\";\r\nimport {scaleThreshold} from \"d3-scale\";\r\nimport {csv} from \"d3-fetch\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\r\nconst geoUrl_states = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst MapChart = ({setTooltipContent}) => {\r\n    const [data, setData] = useState([]);\r\n    const [col, setCol] = useState([]);\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_confirmed_usafacts.csv\").then(counties => {\r\n            setData(counties);\r\n            setCol(counties.columns)\r\n        });\r\n    }, []);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        if (data[i]['countyFIPS'].length === 4) {\r\n            data[i]['countyFIPS'] = \"0\" + data[i]['countyFIPS'];\r\n        }\r\n    }\r\n\r\n    const colorScale = scaleThreshold()\r\n        .domain([0, 5, 10, 50, 100, 500, 1000, 5000, Number.MAX_SAFE_INTEGER])\r\n        .range([\r\n            \"#FFF2F2\",\r\n            \"#FFE5E5\",\r\n            \"#FFC6C6\",\r\n            \"#FFAAAA\",\r\n            \"#FF6868\",\r\n            \"#FD4646\",\r\n            \"#FF0F00\",\r\n            \"#FF0000\",\r\n            \"#A70000\"\r\n        ]);\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\r\n                <ZoomableGroup zoom={1}>\r\n                    <Geographies geography={geoUrl_states}>\r\n                        {({geographies}) => (\r\n                            <>\r\n                                {geographies.map(geo => (\r\n                                    <Geography\r\n                                        key={geo.rsmKey}\r\n                                        stroke=\"#000\"\r\n                                        fill=\"#FFF\"\r\n                                        geography={geo}\r\n                                    />\r\n                                ))}\r\n\r\n                                );\r\n                            </>\r\n                        )}\r\n                    </Geographies>\r\n                    <Geographies geography={geoUrl}>\r\n                        {({geographies}) =>\r\n                            geographies.map(geo => {\r\n                                const cur = data.find(s => s['countyFIPS'] === geo.id);\r\n                                let val = 0;\r\n                                if (cur != null) {\r\n                                    val = cur[col[col.length - 1]] - cur[col[col.length - 2]];\r\n                                    if (val < 0) {\r\n                                        val = 0;\r\n                                    }\r\n                                }\r\n                                return (\r\n                                    <Geography id={geo.id}\r\n                                               key={geo.rsmKey}\r\n                                               geography={geo}\r\n                                               fill={cur ? colorScale(val) : \"#EEE\"}\r\n                                               onMouseEnter={() => {\r\n                                                   if (cur != null) {\r\n                                                       setTooltipContent(cur[\"County Name\"] + \", \" + cur[\"State\"]\r\n                                                                         + \"<br/> New Cases: \" + val);\r\n                                                   }\r\n                                               }}\r\n                                               onMouseLeave={() => {\r\n                                                   setTooltipContent(\"\");\r\n                                               }}\r\n                                               style={{\r\n                                                   hover: {\r\n                                                       fill: \"#FFFFFF\",\r\n                                                       outline: \"none\"\r\n                                                   },\r\n                                                   pressed: {\r\n                                                       fill: \"#E42\",\r\n                                                       outline: \"none\"\r\n                                                   }\r\n                                               }}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </Geographies>\r\n                </ZoomableGroup>\r\n            </ComposableMap>\r\n            <div className=\"info\">\r\n                Retrieved from <a href=\"https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/\">\r\n                usafacts.org</a> <br/>\r\n                New confirmed cases as of: {col[col.length-1]}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React from 'react';\r\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer, Label } from \"recharts\";\r\n\r\nconst Graph = (props) => {\r\n    const data = []\r\n    for (let i = props.columns.length - 7; i < props.columns.length; i++) {\r\n        data.push({\"date\": props.columns[i],\r\n            \"cases\": props.collegeData[props.columns[i]]})\r\n    }\r\n    console.log(props.collegeData)\r\n    return (\r\n        <div className=\"graph\">\r\n            <h3>{props.name}</h3>\r\n            <ResponsiveContainer width=\"90%\" height=\"90%\">\r\n                <LineChart width={600} height={300} data={data}>\r\n                    <Line dataKey=\"cases\" fill=\"#8884d8\"/>\r\n                    <CartesianGrid/>\r\n                    <XAxis dataKey=\"date\" height={50}>\r\n                        <Label value=\"Date\" position=\"insideBottom\"/>\r\n                    </XAxis>\r\n                    <YAxis label={{ offset: 10, value: \"New Cases\", angle: -90,\r\n                        position: \"insideLeft\", textAnchor: \"middle\"}}/>\r\n                    <Tooltip/>\r\n                </LineChart>\r\n            </ResponsiveContainer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Graph;","import React, { useEffect, useState } from \"react\";\r\nimport { csv } from \"d3-fetch\";\r\nimport Graph from \"./Graph\";\r\n\r\nconst Search = () => {\r\n    const [display, setDisplay] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const [colleges, setColleges] = useState([]);\r\n    const [curCollege, setCurCollege] = useState(\"\");\r\n    const [collegeData, setColData] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [columns, setColumns] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        csv('https://raw.githubusercontent.com/KincentLan/covid-19/' +\r\n            'master/public/colleges.csv').then(collegeArr => {\r\n            const names = [];\r\n            collegeArr.forEach(function(row) {\r\n                names.push(row.college);\r\n            })\r\n            setOptions(names);\r\n            setColleges(collegeArr);\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        csv(\"https://usafactsstatic.blob.core.windows.net/public/data/\" +\r\n            \"covid-19/covid_confirmed_usafacts.csv\").then(counties => {\r\n            setData(counties);\r\n            setColumns(counties.columns);\r\n        });\r\n    }, []);\r\n\r\n    function onChange(event) {\r\n        setSearch(event.target.value);\r\n        const college = colleges.find(s => s.college.toLowerCase() === event.target.value.toLowerCase());\r\n        if (college != null) {\r\n            setCurCollege(college);\r\n            setColData(data.find(s => s.countyFIPS === college.countyFIPS));\r\n            setDisplay(true);\r\n        }\r\n        else {\r\n            setDisplay(false);\r\n        }\r\n    }\r\n\r\n    function sevenDayAvg() {\r\n        const collegeDataAvg = {};\r\n        for (let i = 11; i < columns.length; i++) {\r\n            const sevenCases = [];\r\n            for (let j = i - 7; j < i; j++) {\r\n                if (collegeData[columns[j]] - collegeData[columns[j-1]] < 0 || j === 4) {\r\n                    sevenCases.push(0);\r\n                }\r\n                else {\r\n                    sevenCases.push(collegeData[columns[j]] - collegeData[columns[j - 1]]);\r\n                }\r\n            }\r\n            collegeDataAvg[columns[i]] = sevenCases.reduce(function(a, b) {return a + b})/sevenCases.length;\r\n        }\r\n        return collegeDataAvg;\r\n    }\r\n\r\n    function dailyCases() {\r\n        const dailyCases = {};\r\n        for (let i = 4; i < columns.length; i++) {\r\n            if (i === 4) {\r\n                dailyCases[columns[i]] = collegeData[columns[i]];\r\n            }\r\n            else {\r\n                dailyCases[columns[i]] = collegeData[columns[i]] - collegeData[columns[i-1]];\r\n            }\r\n        }\r\n        return dailyCases;\r\n    }\r\n\r\n    return (\r\n        <div className=\"search-div\">\r\n            <input\r\n                type=\"search\"\r\n                autoComplete=\"on\"\r\n                list=\"options\"\r\n                className=\"search\"\r\n                onChange={event => onChange(event)}\r\n                placeholder=\"Type to search for your college.\"\r\n                value={search}\r\n            />\r\n            <datalist id=\"options\">\r\n                {options\r\n                    .filter(name => name.toLowerCase().includes(search.toLowerCase()))\r\n                    .slice(0, 10)\r\n                    .map((value, i) => {\r\n                        return (\r\n                            <option\r\n                                className=\"option\"\r\n                                key={i}\r\n                                tabIndex=\"0\"\r\n                            >\r\n                                {value}\r\n                            </option>\r\n                        );\r\n                    })\r\n                    }\r\n            </datalist>\r\n            {display && (\r\n               <div className=\"college\">\r\n                   <h1>{curCollege.college}</h1>\r\n                   <h2>{collegeData[\"County Name\"] + \", \" + curCollege.state}</h2>\r\n                   <h3>New confirmed cases in {collegeData[\"County Name\"]} as of {columns[columns.length-1]}: {\r\n                       collegeData[columns[columns.length-1]] - collegeData[columns[columns.length-2]]} confirmed cases\r\n                   </h3>\r\n                   <div className=\"float-container\">\r\n                        <Graph name=\"Daily New Cases\" collegeData={dailyCases()} columns={columns}/>\r\n                        <Graph name=\"Seven-Day Moving Average\" collegeData={sevenDayAvg()} columns={columns}/>\r\n                   </div>\r\n               </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport \"./styles.css\";\r\n\r\nimport MapChart from \"./MapChart\";\r\nimport Search from \"./Search\";\r\n\r\nfunction App() {\r\n    const [content, setContent] = useState(\"\");\r\n    return (\r\n        <div>\r\n            <MapChart setTooltipContent={setContent} />\r\n            <ReactTooltip html={true}>{content}</ReactTooltip>\r\n            <Search />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}